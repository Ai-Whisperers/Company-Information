# Azure DevOps Pipeline - Reads directly from GitHub
# This pipeline syncs changes from GitHub to Azure Repos and manages work items

trigger:
  branches:
    include:
    - main
    - develop
    - 'feature/*'
    - 'release/*'
  paths:
    include:
    - '*'
    exclude:
    - '.github/*'  # Avoid circular triggers with GitHub Actions

pr:
  branches:
    include:
    - main
    - develop

pool:
  vmImage: 'ubuntu-22.04'

variables:
  - group: 'GitHub-Sync'  # Create this variable group in Azure DevOps with GITHUB_PAT
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
- stage: Sync
  displayName: 'Sync and Process'
  jobs:
  - job: SyncFromGitHub
    displayName: 'Sync from GitHub'
    steps:
    - checkout: self
      persistCredentials: true
      fetchDepth: 0
      
    - task: PowerShell@2
      displayName: 'Configure Git'
      inputs:
        targetType: 'inline'
        script: |
          git config --global user.email "azure-sync@ai-whisperers.org"
          git config --global user.name "Azure DevOps Bot"
        errorActionPreference: 'stop'
        failOnStderr: true
      retryCountOnTaskFailure: 1
          
    - task: PowerShell@2
      displayName: 'Sync from GitHub'
      inputs:
        targetType: 'inline'
        errorActionPreference: 'stop'
        failOnStderr: false
        script: |
          # Add GitHub as remote if not exists
          if (!(git remote | Select-String "github")) {
            git remote add github https://$(GITHUB_PAT)@github.com/Ai-Whisperers/Company-Information.git
          }
          
          # Fetch from GitHub
          git fetch github
          
          # Merge GitHub changes
          $currentBranch = git rev-parse --abbrev-ref HEAD
          git merge github/$currentBranch --no-edit --allow-unrelated-histories
          
          Write-Host "Synced from GitHub successfully"
          
    - task: PowerShell@2
      displayName: 'Process Work Item Links'
      condition: and(succeeded(), eq(variables.isMain, true))
      inputs:
        targetType: 'inline'
        script: |
          # Extract work item references from commit messages
          $commits = git log --pretty=format:"%H %s" -10
          
          foreach ($commit in $commits) {
            if ($commit -match "AB#(\d+)") {
              $workItemId = $matches[1]
              Write-Host "Found work item reference: AB#$workItemId in commit"
              
              # Create work item link (Azure DevOps automatically handles AB# syntax)
              Write-Host "##vso[build.associate]$workItemId"
            }
          }

- stage: Documentation
  displayName: 'Update Documentation'
  dependsOn: Sync
  condition: and(succeeded(), eq(variables.isMain, true))
  jobs:
  - job: UpdateWiki
    displayName: 'Update Azure Wiki'
    steps:
    - checkout: self
      
    - task: PowerShell@2
      displayName: 'Sync Documentation to Wiki'
      inputs:
        targetType: 'inline'
        script: |
          # Clone wiki repo
          git clone https://$(System.AccessToken)@dev.azure.com/aiwhisperers/AI-Whisperers/_git/AI-Whisperers.wiki wiki
          
          # Copy documentation
          Copy-Item -Path "documentation/*" -Destination "wiki/" -Recurse -Force
          Copy-Item -Path "README.md" -Destination "wiki/Home.md" -Force
          Copy-Item -Path "CLAUDE.md" -Destination "wiki/Claude-Integration.md" -Force
          
          # Copy work items docs
          New-Item -Path "wiki/Work-Items" -ItemType Directory -Force
          Copy-Item -Path "azure-work-items/*.md" -Destination "wiki/Work-Items/" -Force
          
          # Commit and push
          cd wiki
          git config user.email "azure-sync@ai-whisperers.org"
          git config user.name "Azure DevOps Bot"
          git add .
          git diff --staged --quiet || git commit -m "Update wiki from GitHub - Build $(Build.BuildId)"
          git push origin wikiMaster
          
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Documentation'
      inputs:
        PathtoPublish: 'documentation'
        ArtifactName: 'documentation'
        publishLocation: 'Container'
        parallel: true
        retentionDays: 90
      condition: succeededOrFailed()
      continueOnError: false

- stage: Notifications
  displayName: 'Send Notifications'
  dependsOn: Documentation
  condition: always()
  jobs:
  - job: NotifyStatus
    displayName: 'Notify Sync Status'
    steps:
    - task: PowerShell@2
      displayName: 'Create Status Badge'
      inputs:
        targetType: 'inline'
        script: |
          $status = "$(Agent.JobStatus)"
          $badge = if ($status -eq "Succeeded") { "✅" } else { "❌" }
          
          Write-Host "##vso[task.setvariable variable=StatusBadge]$badge"
          Write-Host "##vso[build.updatebuildnumber]$(Build.SourceBranchName)-$(Build.BuildId)-$badge"
          
    - task: PowerShell@2
      displayName: 'Update GitHub Status'
      condition: always()
      inputs:
        targetType: 'inline'
        script: |
          $headers = @{
            "Authorization" = "token $(GITHUB_PAT)"
            "Accept" = "application/vnd.github.v3+json"
          }
          
          $status = if ("$(Agent.JobStatus)" -eq "Succeeded") { "success" } else { "failure" }
          
          $body = @{
            state = $status
            target_url = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
            description = "Azure DevOps Sync"
            context = "continuous-integration/azure-devops"
          } | ConvertTo-Json
          
          Invoke-RestMethod `
            -Uri "https://api.github.com/repos/Ai-Whisperers/Company-Information/statuses/$(Build.SourceVersion)" `
            -Method Post `
            -Headers $headers `
            -Body $body