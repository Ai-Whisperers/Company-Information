import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../db/prisma.service';
import { GitHubService } from '../integrations/github.service';

const REQUIRED_DOCS = [
  'README.md',
  'CONTRIBUTING.md',
  'LICENSE',
  'CODE_OF_CONDUCT.md',
];

const OPTIONAL_DOCS = [
  'ARCHITECTURE.md',
  'API.md',
  'CHANGELOG.md',
  'SECURITY.md',
];

@Injectable()
export class DocsCheckScanner {
  private readonly logger = new Logger(DocsCheckScanner.name);

  constructor(
    private prisma: PrismaService,
    private github: GitHubService,
  ) {}

  async checkRepositoryDocs(repoName: string): Promise<{
    passed: boolean;
    missing: string[];
    optional: string[];
  }> {
    this.logger.debug(`Checking documentation for ${repoName}`);

    try {
      const files = await this.github.getRepositoryContent(repoName, '');
      const fileNames = files.map(f => f.name.toUpperCase());

      const missingRequired = REQUIRED_DOCS.filter(
        doc => !fileNames.includes(doc.toUpperCase())
      );

      const missingOptional = OPTIONAL_DOCS.filter(
        doc => !fileNames.includes(doc.toUpperCase())
      );

      const passed = missingRequired.length === 0;

      // Get or create repository
      const repository = await this.prisma.repository.findUnique({
        where: { name: repoName },
      });

      if (repository) {
        // Check if we have a docs policy
        let policy = await this.prisma.policy.findFirst({
          where: { name: 'Required Documentation' },
        });

        if (!policy) {
          policy = await this.prisma.policy.create({
            data: {
              name: 'Required Documentation',
              description: 'Ensures repositories have required documentation files',
              enabled: 1,
              rules: JSON.stringify({
                required: REQUIRED_DOCS,
                optional: OPTIONAL_DOCS,
              }),
            },
          });
        }

        // Record policy result
        await this.prisma.policyResult.create({
          data: {
            policyId: policy.id,
            repositoryName: repository.name,
            branch: 'main',
            status: passed ? 'PASS' : 'FAIL',
            violations: JSON.stringify({
              missingRequired,
              missingOptional,
              message: passed
                ? 'All required documentation present'
                : `Missing required docs: ${missingRequired.join(', ')}`,
            }),
          },
        });
      }

      return {
        passed,
        missing: missingRequired,
        optional: missingOptional,
      };
    } catch (error) {
      this.logger.error(`Failed to check docs for ${repoName}: ${error.message}`);
      throw error;
    }
  }

  async generateDocumentationPR(repoName: string, templates: string[]) {
    this.logger.log(`Generating documentation PR for ${repoName}`);

    const branchName = `docs/add-required-documentation-${Date.now()}`;
    const files = [];

    for (const template of templates) {
      const content = await this.getTemplate(template);
      if (content) {
        files.push({
          path: template,
          content,
        });
      }
    }

    if (files.length === 0) {
      throw new Error('No templates to apply');
    }

    // Create branch and PR
    await this.github.createBranch(repoName, branchName);

    for (const file of files) {
      await this.github.createOrUpdateFile(
        repoName,
        file.path,
        file.content,
        `Add ${file.path}`,
        branchName,
      );
    }

    const pr = await this.github.createPullRequest(repoName, {
      title: 'Add required documentation',
      body: `This PR adds the following required documentation files:\n\n${files
        .map(f => `- ${f.path}`)
        .join('\n')}\n\nGenerated by AI-Whisperers Org OS`,
      head: branchName,
      base: 'main',
    });

    return pr;
  }

  private async getTemplate(filename: string): Promise<string | null> {
    // These would be loaded from the templates directory
    const templates: Record<string, string> = {
      'README.md': `# Repository Name

## Overview

Brief description of what this repository contains and its purpose.

## Getting Started

### Prerequisites

List any prerequisites needed to run this project.

### Installation

\`\`\`bash
# Installation commands
\`\`\`

### Usage

Provide examples of how to use the project.

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
`,
      'CONTRIBUTING.md': `# Contributing Guidelines

Thank you for considering contributing to this project!

## How to Contribute

1. Fork the repository
2. Create your feature branch (\`git checkout -b feature/amazing-feature\`)
3. Commit your changes (\`git commit -m 'Add some amazing feature'\`)
4. Push to the branch (\`git push origin feature/amazing-feature\`)
5. Open a Pull Request

## Code Standards

- Follow the existing code style
- Add tests for new features
- Update documentation as needed

## Reporting Issues

Please use the issue tracker to report any bugs or feature requests.
`,
      'CODE_OF_CONDUCT.md': `# Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone.

## Our Standards

Examples of behavior that contributes to a positive environment:

* Using welcoming and inclusive language
* Being respectful of differing viewpoints
* Gracefully accepting constructive criticism
* Focusing on what is best for the community

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders.
`,
      'LICENSE': `MIT License

Copyright (c) ${new Date().getFullYear()} AI-Whisperers

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
`,
    };

    return templates[filename] || null;
  }
}