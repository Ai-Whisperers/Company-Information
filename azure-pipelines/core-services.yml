# Azure Pipeline for Core Services
# Build and test Python/Node.js backend services

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - 'repositories/core-services/**'

pool:
  vmImage: 'ubuntu-22.04'

variables:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20.x'
  pip_cache_dir: $(Pipeline.Workspace)/.pip
  npm_config_cache: $(Pipeline.Workspace)/.npm

stages:
- stage: Test
  displayName: 'Test Services'
  jobs:
  - job: PythonTests
    displayName: 'Python Service Tests'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PYTHON_VERSION)
        addToPath: true
        architecture: 'x64'
      displayName: 'Use Python $(PYTHON_VERSION)'
      retryCountOnTaskFailure: 2

    - script: |
        cd repositories/core-services
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Python dependencies'
      retryCountOnTaskFailure: 2
      
    - task: Cache@2
      inputs:
        key: 'python | "$(Agent.OS)" | requirements.txt'
        restoreKeys: |
          python | "$(Agent.OS)"
          python
        path: $(pip_cache_dir)
      displayName: 'Cache pip dependencies'
      condition: succeeded()

    - script: |
        cd repositories/core-services
        python -m pytest tests/ --cov=src --cov-report=xml
      displayName: 'Run Python tests'
    
    - script: |
        cd repositories/core-services
        python -m pip install safety
        safety check --json --output safety-report.json || true
        python -m pip install pip-audit
        pip-audit --format=json --output=pip-audit-report.json || true
      displayName: 'Security vulnerability scan'

  - job: NodeTests
    displayName: 'Node.js Service Tests'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(NODE_VERSION)
        checkLatest: false
      displayName: 'Install Node.js $(NODE_VERSION)'
      retryCountOnTaskFailure: 2

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | repositories/core-services/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
          npm
        path: $(npm_config_cache)
      displayName: 'Cache npm dependencies'
      condition: succeeded()
      
    - script: |
        cd repositories/core-services
        npm ci --prefer-offline --no-audit
      displayName: 'Install Node.js dependencies'
      retryCountOnTaskFailure: 2

    - script: |
        cd repositories/core-services
        npm test
      displayName: 'Run Node.js tests'
      
    - script: |
        cd repositories/core-services
        npm audit --audit-level=high --json > npm-audit-report.json || true
        npx better-npm-audit audit --level=high || true
      displayName: 'Node.js security audit'

- stage: Build
  displayName: 'Build Docker Images'
  condition: succeeded()
  jobs:
  - job: BuildContainers
    displayName: 'Build and Push Images'
    timeoutInMinutes: 30
    cancelTimeoutInMinutes: 2
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'dockerHub'
        repository: 'aiwhisperers/core-services'
        command: 'buildAndPush'
        Dockerfile: 'repositories/core-services/Dockerfile'
        buildContext: 'repositories/core-services'
        addPipelineData: false
        addBaseImageData: false
        includeSourceTags: true
        includeLatestTag: true
        arguments: '--no-cache --pull'
        tags: |
          $(Build.BuildId)
          latest
      displayName: 'Build and push Docker image'
      retryCountOnTaskFailure: 1